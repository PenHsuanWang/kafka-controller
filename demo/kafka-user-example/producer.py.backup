# producer.py
import os, json, time, argparse
from datetime import datetime, timezone
from kafka import KafkaProducer

def build_producer(bootstrap: str) -> KafkaProducer:
    return KafkaProducer(
        bootstrap_servers=bootstrap.split(","),
        value_serializer=lambda v: json.dumps(v).encode("utf-8"),
        key_serializer=lambda k: k.encode("utf-8") if isinstance(k, str) else k,
        # required constraints for idempotence in kafka-python:
        enable_idempotence=True,
        acks=-1,  # use numeric -1 to avoid ambiguity
        max_in_flight_requests_per_connection=1,
        # perf tuning (safe with idempotence):
        linger_ms=20,
        batch_size=32_768,
        compression_type="gzip",
        request_timeout_ms=30_000,
    )

def main():
    ap = argparse.ArgumentParser()
    ap.add_argument("--bootstrap", default=os.getenv("KAFKA_BOOTSTRAP", "localhost:9092"))
    ap.add_argument("--topic", default=os.getenv("TOPIC", "test-topic"))
    ap.add_argument("--key", default=None)
    ap.add_argument("--count", type=int, default=100)
    args = ap.parse_args()

    producer = build_producer(args.bootstrap)

    for i in range(args.count):
        event = {
            "seq": i,
            "ts": datetime.now(timezone.utc).isoformat(),
            "payload": {"msg": f"hello #{i}"},
        }
        producer.send(
            args.topic,
            key=args.key,
            value=event,
            timestamp_ms=int(time.time() * 1000),
        ).get(timeout=10)

    producer.flush()
    producer.close()
    print(f"Sent {args.count} messages to {args.topic}")

if __name__ == "__main__":
    main()
